name: CA Policy Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'templates/**'
      - '.github/workflows/ca-policy-deployment.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module Microsoft.Graph -Force
          Install-Module Pester -Force
          Install-Module PowerShell-YAML -Force
          
      - name: Run Policy Validation
        shell: pwsh
        run: |
          Import-Module ./src/modules/validation/policy_validator.ps1 # Correct module for PolicyValidator
          # $policyDefinitions variable name is more accurate as these are not full policy objects yet.
          $policyDefinitions = Get-Content ./templates/deployment/ca-policies.yaml | ConvertFrom-Yaml
          
          $validator = [PolicyValidator]::new() # Correct constructor call
          $validationResult = $validator.ValidatePolicies($policyDefinitions) # Call the new method

          if ($validationResult.HasErrors) {
            Write-Error "Policy validation failed. Found $($validationResult.TotalErrorsFound) errors."
            # Output all error messages for easier debugging in workflow logs
            $validationResult.AllErrorMessages | ForEach-Object { Write-Error "- $_" }
            throw "Policy validation failed." # Simple throw to fail the step
          } else {
            Write-Host "Policy validation successful. No critical errors found."
            if ($validationResult.TotalWarningsFound -gt 0) {
                # Using Write-Warning for warnings in GitHub Actions will make them more visible (yellow)
                Write-Warning "Found $($validationResult.TotalWarningsFound) warnings:"
                $validationResult.AllWarningMessages | ForEach-Object { Write-Warning "- $_" }
            }
            if ($validationResult.TotalRecommendationsFound -gt 0) {
                Write-Host "Found $($validationResult.TotalRecommendationsFound) recommendations:"
                $validationResult.AllRecommendationMessages | ForEach-Object { Write-Host "- $_" }
            }
          }

  test:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Run Integration Tests
        shell: pwsh
        run: |
          $testParams = @{
            TenantId = $env:TENANT_ID
            TestEnvironment = 'staging'
          }
          Invoke-Pester ./tests/integration/PolicyIntegration.Tests.ps1 -PassThru

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v2
      
      - name: Deploy to Staging
        shell: pwsh
        run: |
          ./scripts/deployment/deploy.ps1 `
            -TenantId $env:TENANT_ID `
            -Environment staging `
            -ConfigPath ./templates/deployment/ca-policies.yaml

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2
      
      - name: Deploy to Production
        shell: pwsh
        run: |
          ./scripts/deployment/deploy.ps1 `
            -TenantId $env:TENANT_ID `
            -Environment production `
            -ConfigPath ./templates/deployment/ca-policies.yaml